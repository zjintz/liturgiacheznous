# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
     app.locales: en|es|pt

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            $projectDir: '%kernel.project_dir%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\EventListener\UserChangedNotifier:
        tags:
            -
                # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'postUpdate'
                entity: 'App\Application\Sonata\UserBundle\Entity\User'
                # 'lazy' option to TRUE to instantiate listeners when they are used
                lazy: true
                # you can also associate an entity listener to a specific entity manager
                #entity_manager: 'custom'

                # by default, Symfony looks for a method called after the event (e.g. postUpdate())
                # if it doesn't exist, it tries to execute the '__invoke()' method, but you can
                # configure a custom method name with the 'method' option
                #method: 'checkUserChanges'
        
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    app.admin.emailsubscription:
        class: App\Admin\EmailSubscriptionAdmin
        arguments: [~, App\Entity\EmailSubscription, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: EmailSubscription }
        calls:
            - [ setTranslationDomain, [messages]]
            
    app.admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Application\Sonata\UserBundle\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: User }
        calls:
            - [ setTranslationDomain, [messages]]

    app.admin.headquarter:
        class: App\Admin\HeadquarterAdmin
        arguments: [~, App\Entity\Headquarter, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Headquarter }

    app.admin.liturgy:
        class: App\Admin\LiturgyAdmin
        arguments: [~, App\Entity\Liturgy, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Liturgy }

    app.admin.liturgy.text:
        class: App\Admin\LiturgyTextAdmin
        arguments: [~, ~, App\Controller\TextAssemblerCRUDController]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Liturgy.Text }


